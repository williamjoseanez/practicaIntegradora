{{>header}}

<h1>Carrito de Compras</h1>
{{!-- 
{{#each products}}
<div class="card">
    <div>
        <p class="card-title">Producto: {{this.product.title}}</p>
        <p class="card-text">Precio: ${{this.product.totalPrice}}</p>
        <button onclick="removeQuantity('{{this.cartId}}', '{{this.product._id}}')" class="btn btn-secondary btn-sm">-</button>
        <p class="card-text">Cantidad: {{this.quantity}}</p>
            <span style="color: azure;" id="quantity_{{this.product._id}}" class="quantity">{{this.quantity}}</span>
         <button onclick="addQuantity('{{this.cartId}}', '{{this.product._id}}')" class="btn btn-secondary btn-sm">+</button>
        <button onclick="deleteProduct('{{../cartId}}', '{{this.product._id}}')" class="btn btn-danger">Eliminar</button>
        <button class="color-button" type="button" onclick="window.location.href='/products'">Seguir comprando</button>


    </div>
</div>
{{/each}}

<div class="card" style="background-color: rgb(141, 158, 158); color:black" >
    <button onclick="emptyCart('{{cartId}}')" class="btn btn-danger">Vaciar Carrito</button>
    <h3 class="mt-2">Total de la compra: ${{totalPurchase}}</h3>
    <button onclick="endPurchase('{{cartId}}')">Terminar Compra</button>
    <button class="color-button" type="button" onclick="window.location.href='/products'">Seguir comprando</button>
        
</div>

<script>
 function addQuantity(cartId, productId) {
    const quantityElement = document.getElementById(`quantity_${productId}`);
    let quantity = parseInt(quantityElement.innerText);
    quantity++;
    updateQuantity(cartId, productId, quantity);
}

function removeQuantity(cartId, productId) {
    const quantityElement = document.getElementById(`quantity_${productId}`);
    let quantity = parseInt(quantityElement.innerText);
    if (quantity > 1) {
        quantity--;
        updateQuantity(cartId, productId, quantity);
    }
}

async function updateQuantity(cartId, productId, newQuantity) {
    try {
        const response = await fetch(`/api/carts/${cartId}/products/${productId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ quantity: newQuantity })
        });

        if (!response.ok) {
            throw new Error('Error al actualizar la cantidad del producto');
        }

        const quantityElement = document.getElementById(`quantity_${productId}`);
        quantityElement.innerText = newQuantity;

        // No es necesario recargar la página aquí, ya que la actualización del DOM ya ha ocurrido

    } catch (error) {
        req.logger.error('Error:', error);
    }
}


    async function deleteProduct(cartId, productId) {
        try {
            const response = await fetch(`/api/carts/${cartId}/products/${productId}`, {
                method: 'DELETE'
            });

            if (!response.ok) {
                throw new Error('Error al eliminar el producto del carrito');
            }

            // Recargar la página o actualizar la interfaz de usuario según sea necesario
            location.reload();
        } catch (error) {
            req.logger.error('Error:', error);
        }
    }

    function emptyCart(cartId) {
        fetch(`/api/carts/${cartId}`, {
            method: "DELETE",
        })
        .then((response) => {
            if (!response.ok) {
                throw new Error("Error al vaciar el carrito");
            }
            location.reload();
        })
        .catch((error) => {
            req.logger.error("Error:", error);
        });
    }

        function endPurchase(cartId) {
    fetch(`/api/carts/${cartId}/purchase`, {
        method: 'POST'
    })
        .then(response => {
            if (!response.ok) {
                throw new Error('Error al finalizar la compra');
            }
            // Obtener el ID del ticket de la respuesta
            return response.json();
        })
        .then(data => {
            const ticketId = data.ticketId;
            const cartId = data.cartId;
            // Redirijo a la página actual pero con detalles del ticket
            window.location.href = `/finalizePurchase/${cartId}/ticket/${ticketId}`;
        })
        .catch(error => {
            req.logger.error('Error:', error);
        });
</script> --}}

  {{#each products}}
    <div class="card">
    
     {{!-- <img src="{{this.thumbnail}}" class="card-img-top" alt="{{this.title}}" /> --}}
      <h3 style="color: antiquewhite;"> {{this.product.title}}</h3>

       <div class="quantity-container">
          <p>Cantidad: </p>
          <div class="quantity-controls">
            <button onclick="removeQuantity('{{this.cartId}}', '{{this.product._id}}')" class="btn btn-secondary btn-sm">-</button>
            <span style="color: antiquewhite;" id="quantity_{{this.product._id}}" class="quantity">{{this.quantity}}</span>
            <button onclick="addQuantity('{{this.cartId}}', '{{this.product._id}}')" class="btn btn-secondary btn-sm">+</button>
          </div>
      </div>


      <p>Precio: ${{this.product.price}}</p> 
      <p>Total: ${{this.product.totalPrice}}</p>
      <button onclick="deleteProduct('{{this.cartId}}', '{{this.product._id}}')"
                class="btn btn-danger">Eliminar</button>
      
    </div>
  {{/each}}


<div class="card" style="background-color: rgb(141, 158, 158); color:black" >
    <button onclick="emptyCart('{{cartId}}')" class="btn btn-danger">Vaciar Carrito</button>
    <h3 class="mt-2">Total de la compra: ${{totalPurchase}}</h3>
    <button onclick="finishPurchase('{{cartId}}')">Terminar Compra</button>
    <button class="color-button" type="button" onclick="window.location.href='/products'">Seguir comprando</button>
        
</div>
{{#if hasTicket}}
    <h2>Ticket de Compra</h2>
    <h4>Comprador:</h4>
    <p>{{purchaser.first_name}} {{purchaser.last_name}}</p>
    <p>{{purchaser.email}}</p>
    <h4>Código: {{ticket.code}}</h4>
    <h4>Fecha Emisión: {{ticket.purchase_datetime}}</h4>
    <h4>Total Compra: {{ticket.amount}}</h4>
{{/if}}





<script>
  function addQuantity(cartId, productId) {
    const quantityElement = document.getElementById(`quantity_${productId}`);
    let quantity = parseInt(quantityElement.innerText);
    quantity++;
    updateQuantity(cartId, productId, quantity, quantityElement);
  }

  function removeQuantity(cartId, productId) {
    const quantityElement = document.getElementById(`quantity_${productId}`);
    let quantity = parseInt(quantityElement.innerText);
    if (quantity > 1) {
      quantity--;
      updateQuantity(cartId, productId, quantity, quantityElement);
    }
  }

  function updateQuantity(cartId, productId, newQuantity, quantityElement) {
    fetch(`/api/carts/${cartId}/products/${productId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ quantity: newQuantity }),
    })
      .then((response) => {
        if (!response.ok) {
          throw new Error('Error al actualizar la cantidad del producto');
        }
         location.reload();
        quantityElement.innerText = newQuantity;
      })
      .catch((error) => {
        req.logger.error('Error:', error);
      });
  }
  


  function deleteProduct(cartId, productId) {
  fetch(`/api/carts/${cartId}/products/${productId}`, {
    method: 'DELETE'
  })
    .then((response) => {
      if (!response.ok) {
        throw new Error('Error al eliminar el producto del carrito');
      }
      location.reload();
    })
    .catch((error) => {
      req.logger.error('Error:', error);
    });
}

function emptyCart(cartId) {
  fetch(`/api/carts/${cartId}`, {
    method: 'DELETE',
  })
    .then((response) => {
      if (!response.ok) {
        throw new Error('Error al vaciar el carrito');
      }
      location.reload();
    })
    .catch((error) => {
      req.logger.error('Error:', error);
    });
}

function finishPurchase(cartId) {
    fetch(`/api/carts/${cartId}/purchase`, {
        method: 'POST'
    })
        .then(response => {
            if (!response.ok) {
                throw new Error('Error al finalizar la compra');
            }
            // Obtener el ID del ticket de la respuesta
            return response.json();
        })
        .then(data => {
            const ticketId = data.ticketId;
            const cartId = data.cartId;
            // Redirijo a la página actual pero con detalles del ticket
            window.location.href = `/finishPurchase/${cartId}/ticket/${ticketId}`;
        })
        .catch(error => {
            req.logger.error('Error:', error);
        });
}


</script>
